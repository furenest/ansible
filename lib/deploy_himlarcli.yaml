#
# Deploy himlarcli to hosts under himlarcli_path
# Verified: This will run under ansible 2.9
#
# sudo ansible-playbook -e "myhosts=bgo-login:bgo-proxy" lib/deploy_himlarcli.yaml
#
- hosts: "{{ myhosts }}"
  gather_facts: True
  tasks:
    - name: Install packages needed to run himlarcli on host
      yum:
        name: "{{ himlarcli_packages }}"
        state: installed
    - name: "Update {{himlarcli_repo}} with version {{himlarcli_ref}}"
      git:
        repo:     "{{himlarcli_repo}}"
        version:  "{{himlarcli_ref}}"
        dest:     "{{himlarcli_path}}"
        force:    "{{himlarcli_force_update}}"
    - name: Manually create the initial virtualenv for himlarcli
      command: virtualenv-3 --clear "{{himlarcli_path}}" creates="{{himlarcli_path}}/bin/activate"
      when:
        - himlarcli_python_command is not defined
        - himlarcli_virutalenv_command is not defined
    - name: Update setuptools
      pip:
        state: latest
        name: setuptools
        virtualenv_command:       "{{himlarcli_virutalenv_command | default(omit)}}"
        virtualenv:               "{{himlarcli_path}}"
        virtualenv_python:        "{{himlarcli_python_command | default(omit)}}"
        chdir:                    "{{himlarcli_path}}"
        virtualenv_site_packages: "no"
    - name: Upgrade pip
      command: bin/pip install --upgrade pip chdir={{himlarcli_path}}
      ignore_errors: "{{ ansible_check_mode }}"
    - name: Install python modules with pip
      pip:
        virtualenv_command:       "{{himlarcli_virutalenv_command | default(omit)}}"
        virtualenv:               "{{himlarcli_path}}"
        virtualenv_python:        "{{himlarcli_python_command | default(omit)}}"
        requirements:             "requirements.txt"
        chdir:                    "{{himlarcli_path}}"
        virtualenv_site_packages: "no"
      ignore_errors: "{{ ansible_check_mode }}"
    - name: Run setup.py if himlarcli package is not setup
      command: bin/python setup.py develop chdir={{himlarcli_path}} creates={{himlarcli_path}}/himlarcli.egg-info
      ignore_errors: "{{ ansible_check_mode }}"
    - name: Copy config.ini from remote host
      fetch: src=/etc/himlarcli/config.ini dest={{himlarcli_path}}/config.ini.{{location}} flat=yes
      when: '("login" not in inventory_hostname) and location != "vagrant"'
#    - name: Run test/deploy.sh
#      command: "{{himlarcli_path}}/tests/deploy.sh"
    - name: Copy user whitelist from /opt/repo
      copy: src=/opt/repo/secrets/common/whitelist_users.txt dest={{himlarcli_path}}/whitelist_users.txt
