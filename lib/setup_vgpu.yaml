#
# This will configure a host for vgpu consumption by virtual instances
# running on the host.
#
# Last verified: 2024-02-07 (ansible version 2.13.3)
#
# sudo ansible-playbook -e "myhosts=osl-compute-vgpu-17" lib/setup_vgpu.yaml
#

- hosts: "{{ myhosts }}"
  user: iaas
  gather_facts: False

  tasks:
    - name: Fail if host is not vGPU host
      fail:
        msg: "{{ inventory_hostname }} is not a vGPU host"
      when: "'vgpu' not in inventory_hostname"

    - name: Ensure correct kernel version
      ansible.builtin.yum:
        name:
          - "kernel-core-{{ vgpu_kernel_version }}"
          - "kernel-devel-{{ vgpu_kernel_version }}"
          - "kernel-headers-{{ vgpu_kernel_version }}"
          - "kernel-modules-{{ vgpu_kernel_version }}"
          - "kernel-tools-libs-{{ vgpu_kernel_version }}"
          - "kernel-tools-{{ vgpu_kernel_version }}"
          - "kernel-{{ vgpu_kernel_version }}"
          - "python3-perf-{{ vgpu_kernel_version }}"
        allow_downgrade: true
        state: present
        update_cache: yes

    - name: Get default kernel
      ansible.builtin.command: grubby --default-kernel
      register: default_boot_kernel
      changed_when: false

    - name: Set default kernel
      ansible.builtin.command: grubby --set-default="{{ required_boot_kernel }}"
      when: default_boot_kernel.stdout != required_boot_kernel

    - name: Blacklist nouveau module
      ansible.builtin.lineinfile:
        path: /etc/modprobe.d/blacklist.conf
        state: present
        create: true
        line: 'blacklist nouveau'
      register: blacklist

    - name: Ensure nouveau is disabled
      ansible.builtin.lineinfile:
        path: /etc/modprobe.d/blacklist.conf
        state: present
        create: true
        line: 'options nouveau modeset=0'
      register: blacklist

    - name: Create new ramdisk with correct nouveau related settings
      ansible.builtin.command: dracut --kver "{{ vgpu_kernel_version }}.x86_64" --force
      when: blacklist is changed

    - name: Install required packages
      ansible.builtin.yum:
        name:
          - nrec-vgpu-mdev
          - wget
          - "@Development Tools"
        state: present

    - name: Rebooting...
      ansible.builtin.reboot:
        reboot_timeout: 1800

    - name: Install Nvidia host driver from repo
      ansible.builtin.yum:
        name: "{{ host_driver_rpm }}"
        state: present
        disable_gpg_check: true
      environment:
        http_proxy: "{{ http_proxy }}"
        https_proxy: "{{ https_proxy }}"

    - name: Enable service - NREC mdev create
      ansible.builtin.service:
        name: create-mdev
        enabled: yes

    - name: Enable timer - NREC mdev cleanup
      ansible.builtin.service:
        name: delete-unused-mdev.timer
        enabled: yes

    - name: Enable service - NVIDIA vGPU Manager Daemon
      ansible.builtin.service:
        name: nvidia-vgpu-mgr
        enabled: yes

    - name: Enable service -  NVIDIA vGPU Daemon
      ansible.builtin.service:
        name: nvidia-vgpud
        enabled: yes

    - name: Rebooting...
      ansible.builtin.reboot:
        reboot_timeout: 1800
